#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

CONFIG_FILE="/usr/local/etc/xray/config.json"
KEYS_FILE="/usr/local/etc/xray/.keys"
SSH_PORT=27198

if [[ $EUID -ne 0 ]]; then
    echo "Запускайте скрипт с правами root." >&2
    exit 1
fi

setup_firewall_ufw() {
    if command -v ufw >/dev/null 2>&1; then
        echo "Настраиваем ufw открывая порты 443/tcp и $SSH_PORT/tcp..."
        ufw allow 443/tcp
        ufw allow "${SSH_PORT}/tcp"
        echo "Правила UFW добавлены. Не забудьте активировать UFW: 'ufw enable'"
    else
        echo "ufw не установлен, пропускаем настройку ufw."
    fi
}

setup_firewall_iptables() {
    if command -v iptables >/dev/null 2>&1; then
        echo "Настраиваем iptables, открывая порты 443/tcp и $SSH_PORT/tcp..."
        iptables -I INPUT -p tcp --dport 443 -j ACCEPT
        iptables -I INPUT -p tcp --dport "${SSH_PORT}" -j ACCEPT
        if command -v iptables-save >/dev/null 2>&1; then
            mkdir -p /etc/iptables
            iptables-save > /etc/iptables/rules.v4
            echo "Правила iptables сохранены."
        else
            echo "Не удалось сохранить правила iptables. Они будут сброшены после перезагрузки."
        fi
    else
        echo "iptables не установлен, пропускаем настройку iptables."
    fi
}

install_xray_core() {
  echo "Запуск установки Xray core..."
  apt update -y
  apt install -y qrencode curl jq openssl
  if ! sysctl net.ipv4.tcp_congestion_control | grep -q bbr; then
    echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
    echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
    sysctl -p
    echo "BBR включён"
  else
    echo "BBR уже включён"
  fi
  bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install || {
    echo "Ошибка установки Xray"
    return 1
  }
  [ -f "$KEYS_FILE" ] && rm "$KEYS_FILE"
  echo "uuid: $(xray uuid)" >> "$KEYS_FILE"
  xray x25519 >> "$KEYS_FILE"
  echo "shortsid: $(openssl rand -hex 8)" >> "$KEYS_FILE"
  chmod 600 "$KEYS_FILE"
  systemctl daemon-reload
  systemctl restart xray
  echo ""
  echo "Xray core успешно установлен."
  echo "Создан файл ключей: $KEYS_FILE"
  echo "Используйте пункты меню для управления."
}

add_vless_user() {
  local email="$1"
  if jq -e --arg email "$email" '.inbounds[0].settings.clients[] | select(.email == $email)' "$CONFIG_FILE" > /dev/null; then
    echo "Пользователь с email $email уже существует." >&2
    return 1
  fi
  local uid
  uid=$(xray uuid)
  jq --arg email "$email" --arg uid "$uid" '.inbounds[0].settings.clients += [{"email": $email, "id": $uid, "flow": "xtls-rprx-vision"}]' "$CONFIG_FILE" > tmp.$$.json && mv tmp.$$.json "$CONFIG_FILE"
  echo "Пользователь VLESS $email добавлен с UUID: $uid"
  systemctl restart xray
}

remove_vless_user() {
  local email="$1"
  if ! jq -e --arg email "$email" '.inbounds[0].settings.clients[] | select(.email == $email)' "$CONFIG_FILE" > /dev/null; then
    echo "Пользователь $email не найден." >&2
    return 1
  fi
  jq --arg email "$email" '(.inbounds[0].settings.clients) |= map(select(.email != $email))' "$CONFIG_FILE" > tmp.$$.json && mv tmp.$$.json "$CONFIG_FILE"
  echo "Пользователь VLESS $email удалён."
  systemctl restart xray
}

list_vless_users() {
  jq -r '.inbounds[0].settings.clients[].email' "$CONFIG_FILE"
}

add_mtproto_user() {
  local secret
  secret=$(openssl rand -hex 16)
  jq --arg secret "$secret" '.inbounds[] |= if .protocol=="mtproto" then .settings.users += [{"secret": $secret}] else . end' "$CONFIG_FILE" > tmp.$$.json && mv tmp.$$.json "$CONFIG_FILE"
  systemctl restart xray
  echo "Добавлен новый MTProto секрет: $secret"
}

remove_mtproto_user() {
  echo "Текущие секреты MTProto:"
  jq -r '.inbounds[] | select(.protocol=="mtproto") | .settings.users[].secret' "$CONFIG_FILE"
  echo -n "Введите секрет для удаления: "
  read -r secret
  if [[ -z "$secret" ]]; then
    echo "Отмена: пустой ввод." >&2
    return 1
  fi
  jq --arg secret "$secret" '.inbounds[] |= if .protocol=="mtproto" then .settings.users |= map(select(.secret != $secret)) else . end' "$CONFIG_FILE" > tmp.$$.json && mv tmp.$$.json "$CONFIG_FILE"
  systemctl restart xray
  echo "Секрет удалён (если найден)."
}

list_mtproto_users() {
  jq -r '.inbounds[] | select(.protocol=="mtproto") | .settings.users[].secret' "$CONFIG_FILE"
}

add_socks_user() {
  echo -n "Введите логин: "
  read -r user
  echo -n "Введите пароль: "
  read -r pass
  if [[ -z "$user" || -z "$pass" ]]; then
    echo "Логин и пароль не могут быть пустыми!" >&2
    return 1
  fi
  jq --arg user "$user" --arg pass "$pass" '.inbounds[] |= if .protocol=="socks" then .settings.accounts += [{"user": $user, "pass": $pass}] else . end' "$CONFIG_FILE" > tmp.$$.json && mv tmp.$$.json "$CONFIG_FILE"
  systemctl restart xray
  echo "Добавлен Socks5 пользователь: $user"
}

remove_socks_user() {
  echo "Текущие Socks5 пользователи:"
  jq -r '.inbounds[] | select(.protocol=="socks") | .settings.accounts[].user' "$CONFIG_FILE"
  echo -n "Введите логин для удаления: "
  read -r user
  if [[ -z "$user" ]]; then
    echo "Отмена: пустой ввод." >&2
    return 1
  fi
  jq --arg user "$user" '.inbounds[] |= if .protocol=="socks" then .settings.accounts |= map(select(.user != $user)) else . end' "$CONFIG_FILE" > tmp.$$.json && mv tmp.$$.json "$CONFIG_FILE"
  systemctl restart xray
  echo "Socks5 пользователь удалён (если найден)."
}

list_socks_users() {
  jq -r '.inbounds[] | select(.protocol=="socks") | .settings.accounts[] | "\(.user) : \(.pass)"' "$CONFIG_FILE"
}

export_vless_link() {
  local ip pubkey sid sni
  ip=$(curl -4 -s icanhazip.com || curl -6 -s icanhazip.com || echo "IP_АДРЕС")
  pubkey=$(awk -F': ' '/Public key/ {print $2}' "$KEYS_FILE")
  sid=$(awk -F': ' '/shortsid/ {print $2}' "$KEYS_FILE")
  sni="github.com"
  for u in $(jq -r '.inbounds[0].settings.clients[].email' "$CONFIG_FILE"); do
    local uuid
    uuid=$(jq -r --arg email "$u" '.inbounds[0].settings.clients[] | select(.email == $email) | .id' "$CONFIG_FILE")
    echo "Ссылка для $u:"
    echo "vless://$uuid@$ip:443?security=reality&sni=$sni&fp=firefox&pbk=$pubkey&sid=$sid&type=tcp&flow=xtls-rprx-vision&encryption=none#$u"
    echo ""
  done
}

print_vless_link_with_qr() {
  local email uuid ip pubkey sid sni link
  ip=$(curl -4 -s icanhazip.com || curl -6 -s icanhazip.com || echo "IP_АДРЕС")
  pubkey=$(awk -F': ' '/Public key/ {print $2}' "$KEYS_FILE")
  sid=$(awk -F': ' '/shortsid/ {print $2}' "$KEYS_FILE")
  sni="github.com"
  echo "Выберите пользователя для отображения ссылки и QR-кода:"
  mapfile -t users < <(jq -r '.inbounds[0].settings.clients[].email' "$CONFIG_FILE")
  if [[ ${#users[@]} -eq 0 ]]; then
    echo "Нет пользователей VLESS."
    return
  fi
  for i in "${!users[@]}"; do
    echo "$((i+1)). ${users[$i]}"
  done
  echo -n "Введите номер пользователя: "
  read -r idx
  if ! [[ "$idx" =~ ^[0-9]+$ ]] || (( idx < 1 || idx > ${#users[@]} )); then
    echo "Некорректный номер."
    return
  fi
  email="${users[$((idx-1))]}"
  uuid=$(jq -r --arg email "$email" '.inbounds[0].settings.clients[] | select(.email == $email) | .id' "$CONFIG_FILE")
  link="vless://$uuid@$ip:443?security=reality&sni=$sni&fp=firefox&pbk=$pubkey&sid=$sid&type=tcp&flow=xtls-rprx-vision&encryption=none#$email"
  echo ""
  echo "Ссылка VLESS для $email:"
  echo "$link"
  echo ""
  if command -v qrencode >/dev/null 2>&1; then
    echo "QR-код:"
    echo "$link" | qrencode -t ansiutf8
  else
    echo "Установите пакет qrencode для отображения QR-кода."
  fi
}

print_help() {
  cat <<EOF
Менеджер Xray - справка по использованию:

Запуск меню менеджера:
  sudo $0

Вывести эту справку:
  sudo $0 help

Основные функции в меню:
  1) Установить/переустановить Xray + все функции
  2) Добавить пользователя VLESS
  3) Удалить пользователя VLESS
  4) Список VLESS пользователей
  5) Добавить MTProto секрет
  6) Удалить MTProto секрет
  7) Список MTProto секретов
  8) Добавить Socks5 пользователя
  9) Удалить Socks5 пользователя
  10) Список Socks5 пользователей
  11) Экспортировать ссылки VLESS
  12) Показать ссылку и QR-код VLESS пользователя
  13) Выход
EOF
}

main_menu() {
    clear
    echo "=== Менеджер Xray ==="
    echo "1) Установить/переустановить Xray + все функции"
    echo "2) Добавить пользователя VLESS"
    echo "3) Удалить пользователя VLESS"
    echo "4) Список VLESS пользователей"
    echo "5) Добавить MTProto секрет"
    echo "6) Удалить MTProto секрет"
    echo "7) Список MTProto секретов"
    echo "8) Добавить Socks5 пользователя"
    echo "9) Удалить Socks5 пользователя"
    echo "10) Список Socks5 пользователей"
    echo "11) Экспортировать ссылки VLESS"
    echo "12) Показать ссылку и QR-код VLESS пользователя"
    echo "13) Выход"
    echo -n "Введите номер: "
    read -r choice
    case $choice in
        1) install_xray_core ;;
        2)
            echo -n "Email нового VLESS пользователя: "
            read -r email
            add_vless_user "$email"
            ;;
        3)
            echo -n "Email пользователя для удаления: "
            read -r email
            remove_vless_user "$email"
            ;;
        4) list_vless_users ;;
        5) add_mtproto_user ;;
        6) remove_mtproto_user ;;
        7) list_mtproto_users ;;
        8) add_socks_user ;;
        9) remove_socks_user ;;
        10) list_socks_users ;;
        11) export_vless_link ;;
        12) print_vless_link_with_qr ;;
        13) exit 0 ;;
        *) echo "Неверный пункт меню." ;;
    esac
    echo "Нажмите Enter для продолжения..."
    read -r
    main_menu
}

if [[ $# -eq 1 && ( "$1" == "help" || "$1" == "--help" ) ]]; then
  print_help
  exit 0
fi

main_menu
